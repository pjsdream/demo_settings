<!-- If using Gazebo, launch with argument use_gazebo:=true -->
<launch>

  <!-- By default, gazebo is not used. -->
  <arg name="use_gazebo" default="false"/>
  
  <!-- Gazebo setting. Copied from fetch_gazebo/launch/playground.launch -->
  <group if="$(arg use_gazebo)">
  
    <env name="GAZEBO_MODEL_PATH" value="$(find fetch_gazebo)/models:$(optenv GAZEBO_MODEL_PATH)" />

    <arg name="robot" default="fetch"/>
    <arg name="debug" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>

    <!-- Start Gazebo with a blank world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="debug" value="$(arg debug)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="false"/>
      <arg name="use_sim_time" value="true"/>
      <arg name="headless" value="$(arg headless)"/>
      <!-- <arg name="world_name" value="$(find fetch_gazebo)/worlds/test_zone.sdf"/> -->
    </include>

    <!-- Oh, you wanted a robot? -->
    <include file="$(find fetch_gazebo)/launch/include/$(arg robot).launch.xml" />
    
    <include file="$(find fetch_moveit_config)/launch/move_group.launch"/>
    
  </group>

  <!-- MoveIt setting. Copied from fetch_moveit_config/launch/demo.launch -->  
  <group unless="$(arg use_gazebo)">
  
    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find fetch_moveit_config)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>
    
    <!-- If needed, broadcast static tf for robot root -->
  
    <!-- We do not have a robot connected, so publish fake joint states -->
    <!--
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="true"/>
      <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
    </node>
    -->

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <arg name="pipeline" default="$(optenv PLANNING_PIPELINE ompl)" />
    <include file="$(find fetch_moveit_config)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="fake_execution" value="true"/>
      <arg name="info" value="true"/>
      <arg name="debug" value="false"/>
      <arg name="pipeline" value="$(arg pipeline)" />
    </include>

    <!-- odom to base_link tf broadcaster -->
    <node name="base_link_tf_broadcaster" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 odom base_link 100"/>

    <!-- Moveit obstacle -->
    <!--
    <node name="shelf_publisher" pkg="demo_utils" type="moveit_object_publisher" output="screen">
      <remap from="planning_scene" to="planning_scene"/>
      <rosparam command="load" file="$(find move_fetch)/config/apc_environment.yaml"/>
    </node>
    -->
  </group>
  
  <!-- map to odom tf broadcaster -->
  <node name="odom_tf_broadcaster" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 map odom 100"/>

  <!-- Open rviz. Copied from fetch_moveit_config/launch/moveit_rviz.launch -->
  <arg name="command_args" value="-d $(find move_fetch)/launch/table.rviz" />
  <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false"
	args="$(arg command_args)" output="screen">
    <rosparam command="load" file="$(find fetch_moveit_config)/config/kinematics.yaml"/>
  </node>

</launch>
